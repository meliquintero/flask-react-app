{"version":3,"sources":["components/ImageList.js","components/ImageDetail.js","App.js","serviceWorker.js","index.js"],"names":["ImageList","images","onImageSelect","imageList","map","image","className","onClick","id","src","image_data","alt","ImageDetail","imageDisplay","useState","details","setDetails","useEffect","fetch","then","response","json","data","console","log","title","description","dateCreated","App","setImages","selectedImage","setSelectedImage","imageId","selected","find","element","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOAuBeA,G,MAnBG,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,cACpBC,EAAYF,EAAOG,KAAI,SAAAC,GAC3B,OACE,yBAAKC,UAAU,kBAAkBC,QAAS,kBAAML,EAAcG,EAAMG,MAClE,yBACEF,UAAU,WACVG,IAAG,iCAA4BJ,EAAMK,YACrCC,IAAKN,EAAMG,SAKnB,OACE,yBAAKF,UAAU,2BACXH,KCeOS,EA/BK,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAAkB,EACRC,mBAAS,IADD,mBAC/BC,EAD+B,KACtBC,EADsB,KAStC,OAPAC,qBAAU,WACRC,MAAM,iBAAD,OAAkBL,EAAaL,KAAOW,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAChFN,EAAWM,QAEZ,CAACT,IAEJU,QAAQC,IAAI,cAAeX,GACvBA,EAMF,6BACE,yBAAKP,UAAU,YACb,yBACAA,UAAU,WACVmB,MAAM,eACNhB,IAAG,iCAA4BI,EAAaH,eAG9C,yBAAKJ,UAAU,cACb,wBAAIA,UAAU,UAAUS,EAAQW,aAChC,uBAAGpB,UAAU,UAAUS,EAAQY,gBAfnCJ,QAAQC,IAAIX,GACL,+CCqCIe,EA5CH,WAAO,IAAD,EACYd,mBAAS,IADrB,mBACTb,EADS,KACD4B,EADC,OAE0Bf,mBAAS,MAFnC,mBAETgB,EAFS,KAEMC,EAFN,KAIhBd,qBAAU,WACRC,MAAM,eAAeC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAC1DO,EAAUP,EAAKrB,QACf8B,EAAiBT,EAAKrB,OAAO,SAE9B,IAEHgB,qBAAU,cACP,CAACa,IASJ,OAEE,yBAAKxB,UAAU,gBACb,yBAAKA,UAAU,WACX,yBAAKA,UAAU,UACb,yBAAKA,UAAU,sBACbwB,GACA,kBAAC,EAAD,CAAajB,aAAciB,KAG7B,yBAAKxB,UAAU,oBACbL,GACA,kBAAC,EAAD,CACEA,OAAQA,EACRC,cArBQ,SAAC8B,GACrB,IAAIC,EAAWhC,EAAOiC,MAAK,SAACC,GAC1B,OAAOA,EAAQ3B,KAAOwB,KAExBD,EAAiBE,WCZDG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"js/main.87e08120.chunk.js","sourcesContent":["import React from 'react';\n\nimport './ImageList.css';\n\nconst ImageList = ({images, onImageSelect}) => {\n  const imageList = images.map(image => {\n    return(\n      <div className=\"image-item item\" onClick={() => onImageSelect(image.id)}>\n        <img\n          className=\"ui image\"\n          src={`data:image/jpeg;base64,${image.image_data}`}\n          alt={image.id}/>\n      </div>\n    );\n  })\n\n  return(\n    <div className=\"ui relaxed divided list\">\n      { imageList }\n    </div>\n  )\n}\n\nexport default ImageList;\n","import React, { useState, useEffect }  from 'react';\n\nconst ImageDetail = ({imageDisplay}) => {\n  const [details, setDetails] = useState([]);\n  useEffect(() => {\n    fetch(`/get-image?id=${imageDisplay.id}`,).then(response => response.json()).then(data => {\n      setDetails(data)\n    })\n  }, [imageDisplay]);\n\n  console.log('ImageDetail', imageDisplay)\n  if(!imageDisplay) {\n    console.log(imageDisplay)\n    return <div> Loading... </div>;\n  }\n\n  return(\n    <div>\n      <div className=\"ui embed\">\n        <img\n        className=\"ui image\"\n        title=\"image player\"\n        src={`data:image/jpeg;base64,${imageDisplay.image_data}`}/>\n\n      </div>\n      <div className=\"ui segment\">\n        <h4 className=\"header\">{details.description}</h4>\n        <p className=\"header\">{details.dateCreated}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default ImageDetail;\n","import React, { useState, useEffect }  from 'react';\nimport ImageList from './components/ImageList';\nimport ImageDetail from './components/ImageDetail';\n\n// import './App.css';\n\nconst App = () => {\n  const [images, setImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  useEffect(() => {\n    fetch('/get-images').then(response => response.json()).then(data => {\n      setImages(data.images)\n      setSelectedImage(data.images[0])\n    })\n  }, []);\n\n  useEffect(() => {\n  }, [selectedImage]);\n\n  const onImageSelect = (imageId) => {\n    let selected = images.find((element) => {\n      return element.id === imageId;\n    });\n    setSelectedImage(selected)\n  }\n\n  return (\n\n    <div className=\"ui container\">\n      <div className=\"ui grid\">\n          <div className=\"ui row\">\n            <div className=\"eleven wide column\">\n            { selectedImage &&\n              <ImageDetail imageDisplay={selectedImage}/>\n            }\n            </div>\n            <div className=\"five wide column\">\n            { images &&\n              <ImageList\n                images={images}\n                onImageSelect={onImageSelect}/>\n            }\n            </div>\n          </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}